# Exemplo #3. Propriedades Básicas da PCA  #
# Nota: esse exemplo não consta nos slides #
# ######################################## #
## labels: indicadores de várias dimensões
lab = c('P_GRAD', 'P_OUTROMUNC', 'M_DENSMORA',
'P_POBREZA', 'M_RENDDOM', 'ICE_renda')
## matriz de observações
X = dta[, lab]
## PCA na matriz de *covariâncias*
# Nota: 'princomp' é nativa da biblioteca stats
PCA = princomp(X, cor = FALSE)
summary(PCA)
# matriz de pesos
PCA$loadings[]
## PCA na matriz de *correlações*
# (compare os resultados com o PCA acima)
PCA = princomp(X, cor = TRUE)
summary(PCA)
# matriz de pesos
PCA$loadings[]
# Re-escalando X: resultados equivalentes
Z = scale(X)
summary(princomp(Z, cor = FALSE))
summary(princomp(Z, cor = TRUE))
# ortogonalidade dos pesos
W = PCA$loadings[]
print(round(t(W)%*%W), 10)
# ortogonalidade das componentes
print(round(t(PCA$scores)%*%PCA$scores, 10))
print(round(cov(PCA$scores), 10))
## PCA via decomposição espectral
# Nota #1: eigen(cov(Z)) = eigen(cor(X))
# Nota #2: pequenas diferenças numéricas nas soluções
# =========  podem ocorrer devido ao algoritmo usado
# =========  para decomposição na PCA
D = eigen(cov(Z))
lambda = D$values
Lambda = diag(lambda)
Lambda
# desvios padrão
sqrt.lambda = sqrt(lambda)
sqrt.lambda
# percentual da variância total
VT = sum(diag(cov(Z)))
VT
VP = 100*lambda/VT
VP
# comparação com princomp
summary(PCA)
rbind(round(sqrt.lambda, 7),
round(VP, 7),
round(cumsum(VP), 7)
)
# ######################################## #
# Exemplo Prático. Indicadores de Educação #
# ######################################## #
## labels
lab = c('P_GRAD', 'P_MEST', 'P_DOUTOR',
'P_SEM_INST', 'P_FUND', 'P_ENSMED',
'P_ENSSUP')
## matriz de observações
X = dta[, lab]
# matriz de observações padronizadas
Z = scale(X)
## PCA
PCA = princomp(Z)
summary(PCA)
# matriz de pesos
PCA$loadings[]
# salvando os resultados em um arquivo de texto
sink(file = '_out/output/PCA_EDUCATION.txt')
print(summary(PCA))
cat('\n')
print(PCA$loadings[])
sink()
## scree plot
screeplot(PCA, main = 'Scree Plot (dashed line = Kaiser rule)', type = 'l')
# regra de Kaiser
abline(h = 1, lty = 2)
# salvando em .png
dev.print(file = '_out/figures/figScreePlot_EDUCATION.png',
device = png, width = 1024, height = 768, res = 2*72)
## mapa: scores da PCA
# visualizando os 6 primeiros scores de cada componente
head(PCA$scores)
# salvando os scores da 1ª componente principal no objeto sf
sf.obj$`Comp. 1` = PCA$scores[, 1]
# classificando em quintis
sf.obj$`Comp. 1_cat` = quant.class(sf.obj$`Comp. 1`, c = 5)
# invocando ggplot
p = ggplot(data = sf.obj) +
# raster geom
geom_sf(aes(fill = `Comp. 1_cat`)) +
# tema
theme(
# legenda
legend.title = element_text(face = 'bold'),
legend.key = element_blank(),
legend.background = element_rect(colour = 'black'),
# painéis
panel.background = element_blank(),
panel.border = element_rect(colour = 'black', fill = NA),
# título
plot.title = element_text(hjust = 0.5, face = 'bold')
) +
# título
ggtitle(paste('Scores da 1ª Componente da PCA: Educação')) +
# legenda
guides(fill = guide_legend('Comp. 1')) +
# paleta de cores
scale_fill_brewer(palette = 'RdYlBu') +
# barra de escala (ggspatial)
ggspatial::annotation_scale() +
# rosa dos ventos (ggsn)
ggsn::north(sf.obj)
print(p)
# salvando em .png
dev.print(file = '_out/figures/figMap_PCA_EDUCATION.png',
device = png, width = 1024, height = 768, res = 2*72)
# ########################################## #
# Exemplo Prático. Indicadores de Mobilidade #
# ########################################## #
## labels
lab = c('P_OUTROMUNC', 'P_CASADIA', 'P_ATE5',
'P_6A30', 'P_1A2', 'P_MAISDE2')
## matriz de observações
X = dta[, lab]
# matriz de observações padronizadas
Z = scale(X)
## PCA
PCA = princomp(Z)
summary(PCA)
# matriz de pesos
PCA$loadings[]
# salvando os resultados em um arquivo de texto
sink(file = '_out/output/PCA_MOBILITY.txt')
print(summary(PCA))
cat('\n')
print(PCA$loadings[])
sink()
## scree plot
screeplot(PCA, main = 'Scree Plot (dashed line = Kaiser rule)', type = 'l')
# regra de Kaiser
abline(h = 1, lty = 2)
# salvando em .png
dev.print(file = '_out/figures/figScreePlot_MOBILITY.png',
device = png, width = 1024, height = 768, res = 2*72)
## mapa: scores da PCA
# visualizando os 6 primeiros scores de cada componente
head(PCA$scores)
# salvando os scores da 1ª componente principal no objeto sf
sf.obj$`Comp. 1` = PCA$scores[, 1]
# classificando em quintis
sf.obj$`Comp. 1_cat` = quant.class(sf.obj$`Comp. 1`, c = 5)
# invocando ggplot
p = ggplot(data = sf.obj) +
# raster geom
geom_sf(aes(fill = `Comp. 1_cat`)) +
# tema
theme(
# legenda
legend.title = element_text(face = 'bold'),
legend.key = element_blank(),
legend.background = element_rect(colour = 'black'),
# painéis
panel.background = element_blank(),
panel.border = element_rect(colour = 'black', fill = NA),
# título
plot.title = element_text(hjust = 0.5, face = 'bold')
) +
# título
ggtitle(paste('Scores da 1ª Componente da PCA: Mobilidade')) +
# legenda
guides(fill = guide_legend('Comp. 1')) +
# paleta de cores
scale_fill_brewer(palette = 'RdYlBu') +
# barra de escala (ggspatial)
ggspatial::annotation_scale() +
# rosa dos ventos (ggsn)
ggsn::north(sf.obj)
print(p)
# salvando em .png
dev.print(file = '_out/figures/figMap_PCA_MOBILITY.png',
device = png, width = 1024, height = 768, res = 2*72)
# ####################################### #
# Exemplo Prático. Indicadores de Pobreza #
# ####################################### #
## labels
lab = c('M_DENSMORA', 'P_POBREZA', 'P_PPI_POBREZA',
'P_BOLSA_FAM', 'P_OUTROSPROG')
## matriz de observações
X = dta[, lab]
# matriz de observações padronizadas
Z = scale(X)
## PCA
PCA = princomp(Z)
summary(PCA)
# matriz de pesos
PCA$loadings[]
# salvando os resultados em um arquivo de texto
sink(file = '_out/output/PCA_POVERTY.txt')
print(summary(PCA))
cat('\n')
print(PCA$loadings[])
sink()
## scree plot
screeplot(PCA, main = 'Scree Plot (dashed line = Kaiser rule)', type = 'l')
# regra de Kaiser
abline(h = 1, lty = 2)
# salvando em .png
dev.print(file = '_out/figures/figScreePlot_POVERTY.png',
device = png, width = 1024, height = 768, res = 2*72)
## mapa: scores da PCA
# visualizando os 6 primeiros scores de cada componente
head(PCA$scores)
# salvando os scores da 1ª componente principal no objeto sf
sf.obj$`Comp. 1` = PCA$scores[, 1]
# classificando em quintis
sf.obj$`Comp. 1_cat` = quant.class(sf.obj$`Comp. 1`, c = 5)
# invocando ggplot
p = ggplot(data = sf.obj) +
# raster geom
geom_sf(aes(fill = `Comp. 1_cat`)) +
# tema
theme(
# legenda
legend.title = element_text(face = 'bold'),
legend.key = element_blank(),
legend.background = element_rect(colour = 'black'),
# painéis
panel.background = element_blank(),
panel.border = element_rect(colour = 'black', fill = NA),
# título
plot.title = element_text(hjust = 0.5, face = 'bold')
) +
# título
ggtitle(paste('Scores da 1ª Componente da PCA: Pobreza')) +
# legenda
guides(fill = guide_legend('Comp. 1')) +
# paleta de cores
scale_fill_brewer(palette = 'RdYlBu') +
# barra de escala (ggspatial)
ggspatial::annotation_scale() +
# rosa dos ventos (ggsn)
ggsn::north(sf.obj)
print(p)
# salvando em .png
dev.print(file = '_out/figures/figMap_PCA_POVERTY.png',
device = png, width = 1024, height = 768, res = 2*72)
# ########################################## #
# Exemplo Prático. Indicadores de Deprivação #
# ########################################## #
## labels
lab = c('P_ALVSREV', 'P_REDE_ESG', 'P_REDE_AGUA',
'P_LIXO', 'P_ENERGIA', 'P_TV',
'P_MAQLAV', 'P_GELADEIRA', 'P_MAQTVGEL',
'P_CELULAR', 'P_COMP_INT', 'P_CELCOMPINT',
'P_MOTO', 'P_CARRO', 'P_ADEQ',
'P_TUDOADEQ', 'P_NEM_MOTO_CARRO', 'P_SO_MOTO',
'P_SO_CARRO')
## matriz de observações
X = dta[, lab]
# matriz de observações padronizadas
Z = scale(X)
## PCA
PCA = princomp(Z)
summary(PCA)
# matriz de pesos
PCA$loadings[]
# salvando os resultados em um arquivo de texto
sink(file = '_out/output/PCA_DEPRIVATION.txt')
print(summary(PCA))
cat('\n')
print(PCA$loadings[])
sink()
## scree plot
screeplot(PCA, main = 'Scree Plot (dashed line = Kaiser rule)', type = 'l')
# regra de Kaiser
abline(h = 1, lty = 2)
# salvando em .png
dev.print(file = '_out/figures/figScreePlot_DEPRIVATION.png',
device = png, width = 1024, height = 768, res = 2*72)
## mapa: scores da PCA
# visualizando os 6 primeiros scores de cada componente
head(PCA$scores)
# salvando os scores da 1ª componente principal no objeto sf
sf.obj$`Comp. 1` = PCA$scores[, 1]
# classificando em quintis
sf.obj$`Comp. 1_cat` = quant.class(sf.obj$`Comp. 1`, c = 5)
# invocando ggplot
p = ggplot(data = sf.obj) +
# raster geom
geom_sf(aes(fill = `Comp. 1_cat`)) +
# tema
theme(
# legenda
legend.title = element_text(face = 'bold'),
legend.key = element_blank(),
legend.background = element_rect(colour = 'black'),
# painéis
panel.background = element_blank(),
panel.border = element_rect(colour = 'black', fill = NA),
# título
plot.title = element_text(hjust = 0.5, face = 'bold')
) +
# título
ggtitle(paste('Scores da 1ª Componente da PCA: Deprivação')) +
# legenda
guides(fill = guide_legend('Comp. 1')) +
# paleta de cores
scale_fill_brewer(palette = 'RdYlBu') +
# barra de escala (ggspatial)
ggspatial::annotation_scale() +
# rosa dos ventos (ggsn)
ggsn::north(sf.obj)
print(p)
# salvando em .png
dev.print(file = '_out/figures/figMap_PCA_DEPRIVATION.png',
device = png, width = 1024, height = 768, res = 2*72)
# ##################################### #
# Exemplo Prático. Indicadores de Renda #
# ##################################### #
## labels
lab = c('M_RENDDOM')
## matriz de observações
X = dta[, lab]
# matriz de observações padronizadas
Z = scale(X)
## PCA
PCA = princomp(Z)
summary(PCA)
# matriz de pesos
PCA$loadings[]
# salvando os resultados em um arquivo de texto
sink(file = '_out/output/PCA_INCOME.txt')
print(summary(PCA))
cat('\n')
print(PCA$loadings[])
sink()
## scree plot
screeplot(PCA, main = 'Scree Plot (dashed line = Kaiser rule)', type = 'l')
# regra de Kaiser
abline(h = 1, lty = 2)
# salvando em .png
dev.print(file = '_out/figures/figScreePlot_INCOME.png',
device = png, width = 1024, height = 768, res = 2*72)
## mapa: scores da PCA
# visualizando os 6 primeiros scores de cada componente
head(PCA$scores)
# salvando os scores da 1ª componente principal no objeto sf
sf.obj$`Comp. 1` = PCA$scores[, 1]
# classificando em quintis
sf.obj$`Comp. 1_cat` = quant.class(sf.obj$`Comp. 1`, c = 5)
# invocando ggplot
p = ggplot(data = sf.obj) +
# raster geom
geom_sf(aes(fill = `Comp. 1_cat`)) +
# tema
theme(
# legenda
legend.title = element_text(face = 'bold'),
legend.key = element_blank(),
legend.background = element_rect(colour = 'black'),
# painéis
panel.background = element_blank(),
panel.border = element_rect(colour = 'black', fill = NA),
# título
plot.title = element_text(hjust = 0.5, face = 'bold')
) +
# título
ggtitle(paste('Scores da 1ª Componente da PCA: Renda')) +
# legenda
guides(fill = guide_legend('Comp. 1')) +
# paleta de cores
scale_fill_brewer(palette = 'RdYlBu') +
# barra de escala (ggspatial)
ggspatial::annotation_scale() +
# rosa dos ventos (ggsn)
ggsn::north(sf.obj)
print(p)
# salvando em .png
dev.print(file = '_out/figures/figMap_PCA_INCOME.png',
device = png, width = 1024, height = 768, res = 2*72)
# ####################################### #
# Exemplo Prático. Indicadores de Riqueza #
# ####################################### #
## labels
lab = c('P_ALUG100', 'P_BANH4OUMAIS', 'P_IDOSO10SM')
## matriz de observações
X = dta[, lab]
# matriz de observações padronizadas
Z = scale(X)
## PCA
PCA = princomp(Z)
summary(PCA)
# matriz de pesos
PCA$loadings[]
# salvando os resultados em um arquivo de texto
sink(file = '_out/output/PCA_WEALTH.txt')
print(summary(PCA))
cat('\n')
print(PCA$loadings[])
sink()
## scree plot
screeplot(PCA, main = 'Scree Plot (dashed line = Kaiser rule)', type = 'l')
# regra de Kaiser
abline(h = 1, lty = 2)
# salvando em .png
dev.print(file = '_out/figures/figScreePlot_WEALTH.png',
device = png, width = 1024, height = 768, res = 2*72)
## mapa: scores da PCA
# visualizando os 6 primeiros scores de cada componente
head(PCA$scores)
# salvando os scores da 1ª componente principal no objeto sf
sf.obj$`Comp. 1` = PCA$scores[, 1]
# classificando em quintis
sf.obj$`Comp. 1_cat` = quant.class(sf.obj$`Comp. 1`, c = 5)
# invocando ggplot
p = ggplot(data = sf.obj) +
# raster geom
geom_sf(aes(fill = `Comp. 1_cat`)) +
# tema
theme(
# legenda
legend.title = element_text(face = 'bold'),
legend.key = element_blank(),
legend.background = element_rect(colour = 'black'),
# painéis
panel.background = element_blank(),
panel.border = element_rect(colour = 'black', fill = NA),
# título
plot.title = element_text(hjust = 0.5, face = 'bold')
) +
# título
ggtitle(paste('Scores da 1ª Componente da PCA: Riqueza')) +
# legenda
guides(fill = guide_legend('Comp. 1')) +
# paleta de cores
scale_fill_brewer(palette = 'RdYlBu') +
# barra de escala (ggspatial)
ggspatial::annotation_scale() +
# rosa dos ventos (ggsn)
ggsn::north(sf.obj)
print(p)
# salvando em .png
dev.print(file = '_out/figures/figMap_PCA_WEALTH.png',
device = png, width = 1024, height = 768, res = 2*72)
# ########################################## #
# Exemplo Prático. Indicadores de Segregação #
# ########################################## #
## labels
lab = c('ICE_renda', 'ICE_edu', 'ICE_renda_preto',
'ICE_renda_ppi', 'ICE_branco_renda')
## matriz de observações
X = dta[, lab]
# matriz de observações padronizadas
Z = scale(X)
## PCA
PCA = princomp(Z)
summary(PCA)
# matriz de pesos
PCA$loadings[]
# salvando os resultados em um arquivo de texto
sink(file = '_out/output/PCA_SEGREGATION.txt')
print(summary(PCA))
cat('\n')
print(PCA$loadings[])
sink()
## scree plot
screeplot(PCA, main = 'Scree Plot (dashed line = Kaiser rule)', type = 'l')
# regra de Kaiser
abline(h = 1, lty = 2)
# salvando em .png
dev.print(file = '_out/figures/figScreePlot_SEGREGATION.png',
device = png, width = 1024, height = 768, res = 2*72)
## mapa: scores da PCA
# visualizando os 6 primeiros scores de cada componente
head(PCA$scores)
# salvando os scores da 1ª componente principal no objeto sf
sf.obj$`Comp. 1` = PCA$scores[, 1]
# classificando em quintis
sf.obj$`Comp. 1_cat` = quant.class(sf.obj$`Comp. 1`, c = 5)
# invocando ggplot
p = ggplot(data = sf.obj) +
# raster geom
geom_sf(aes(fill = `Comp. 1_cat`)) +
# tema
theme(
# legenda
legend.title = element_text(face = 'bold'),
legend.key = element_blank(),
legend.background = element_rect(colour = 'black'),
# painéis
panel.background = element_blank(),
panel.border = element_rect(colour = 'black', fill = NA),
# título
plot.title = element_text(hjust = 0.5, face = 'bold')
) +
# título
ggtitle(paste('Scores da 1ª Componente da PCA: Segregação')) +
# legenda
guides(fill = guide_legend('Comp. 1')) +
# paleta de cores
scale_fill_brewer(palette = 'RdYlBu') +
# barra de escala (ggspatial)
ggspatial::annotation_scale() +
# rosa dos ventos (ggsn)
ggsn::north(sf.obj)
print(p)
# salvando em .png
dev.print(file = '_out/figures/figMap_PCA_SEGREGATION.png',
device = png, width = 1024, height = 768, res = 2*72)

695.19,695.19,695.19,
1280.50,1280.50,1280.50,
1842.9,1842.9,1842.9,
629.31,629.31,629.31,
1137.82,1137.82,1137.82,
757.85,757.85,757.85,
695.05,695.05,695.05)
Gasto3x=c(1166.77,1166.77,1166.77,
1951.0,1951.0,1951.0,
1737.32,1737.32,1737.32,
744.90,744.90,744.90,
1544.75,1544.75,1544.75,
1295.87, 1295.87, 1295.87,
981.98,981.98,981.98,
1050.07,1050.07,1050.07,
645.03,645.03,645.03,
615.69,615.69,615.69)
modelo3 <- lm(Gasto3x~Renda3x)   #Funcao do R para o ajuste do MRLS
summary(modelo3)             #Mostra alguns resumos do ajuste
#--
#Calculando os novos intervalos de confiança
confint(modelo3, level = 0.95) # siginificância 5%
#Plotando o Novo Gráfico com Intervalo de Confiança de 95%
#Note o estreitamento da amplitude dos intervalos de confiança!
ggplotly(
ggplot(modelo3, aes(x = Renda3x, y = Gasto3x)) +
geom_point(color = "#39568CFF") +
geom_smooth(aes(color = "Fitted Values"),
method = "lm",
level = 0.95) +
labs(x = "Renda 3x",
y = "Gasto 3x") +
scale_color_manual("Legenda:",
values = "grey50") +
theme_bw()
)
summary(modelo3)             #Mostra alguns resumos do ajuste
summary(modelo1)             #Mostra alguns resumos do ajuste
#Plotando o Novo GrÃ¡fico com Intervalo de ConfianÃ§a de 95%
#Note o estreitamento da amplitude dos intervalos de confianÃ§a!
ggplotly(
ggplot(modelo1, aes(x = Renda, y = Gasto)) +
geom_point(color = "#39568CFF") +
geom_smooth(aes(color = "Fitted Values"),
method = "lm",
level = 0.95) +
labs(x = "Renda_com",
y = "Gasto_com") +
scale_color_manual("Legenda:",
values = "grey50") +
theme_bw()
)
#Plotando o Novo GrÃ¡fico com Intervalo de ConfianÃ§a de 95%
#Note o estreitamento da amplitude dos intervalos de confianÃ§a!
ggplotly(
ggplot(modelo2, aes(x = Renda, y = Gasto)) +
geom_point(color = "#39568CFF") +
geom_smooth(aes(color = "Fitted Values"),
method = "lm",
level = 0.95) +
labs(x = "Renda_sem",
y = "Gasto_sem") +
scale_color_manual("Legenda:",
values = "grey50") +
theme_bw()
)
#Plotando o Novo Gráfico com Intervalo de Confiança de 95%
#Note o estreitamento da amplitude dos intervalos de confiança!
ggplotly(
ggplot(modelo3, aes(x = Renda3x, y = Gasto3x)) +
geom_point(color = "#39568CFF") +
geom_smooth(aes(color = "Fitted Values"),
method = "lm",
level = 0.95) +
labs(x = "Renda 3x",
y = "Gasto 3x") +
scale_color_manual("Legenda:",
values = "grey50") +
theme_bw()
)
#Comparando os parâmetros do modelo1 X modelo2
export_summs(modelo1, modelo2, scale = F, digits = 4)
#Plotando o Novo GrÃ¡fico com Intervalo de ConfianÃ§a de 95%
#Note o estreitamento da amplitude dos intervalos de confianÃ§a!
ggplotly(
ggplot(modelo2, aes(x = Renda, y = Gasto)) +
geom_point(color = "#39568CFF") +
geom_smooth(aes(color = "Fitted Values"),
method = "lm",
level = 0.95) +
labs(x = "Renda_sem",
y = "Gasto_sem") +
scale_color_manual("Legenda:",
values = "grey50") +
theme_bw()
)
#Gráfico didático para visualizar o viés decorrente de se eliminar erroneamente
#o intercepto em modelos regressivos
my_plot2 <-
ggplot(modelo1, aes(x = Gasto, y = Renda)) +
geom_point(color = "#39568CFF", size = 2.5) +
geom_smooth(aes(color = "Fitted Values OLS"),
method = "lm", se = F, size = 1.5) +
geom_segment(aes(color = "Sem Intercepto",
x = min(Gasto),
xend = max(Gasto),
y = modelo2$coefficients[1]*min(Gasto),
yend = modelo2$coefficients[1]*max(Gasto)),
size = 1.5) +
labs(x = "Renda",
y = "Gasto") +
scale_color_manual("Legenda:",
values = c("grey50", "#1F968BFF")) +
theme_cowplot()
my_plot2
say(what = "Cannot index object of type 'cat food'.", by = "cat", type = "warning")
cowsay::say(what = "Cannot index object of type 'cat food'.", by = "cat", type = "warning")
clear
# --
## limpando o workspace
rm(list = ls())
pacotes <- c("corrplot",   # matrizes de correlação
"ggplot2",    # gráficos diversos
"ggspatial",  # mapas e shapefiles
"ggsn",       # mapas e shapefiles
"raster",     # mapas e shapefiles
"rgdal",      # mapas e shapefiles
"sf",         # mapas e shapefiles
"sp",         # mapas e shapefiles
"tidyverse",  # manipulação de bases de dados
"kableExtra",
"RcmdrMisc",  # Teste KMO
"dplyr",
"writexl",    # salvar em excel
"reshape2")   # função melt
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
## diretório de trabalho
setwd("C:/Users/Renato/OneDrive/github/_tcc/1_pca/estudo_composicoes")
#--
## carregando funções auxiliares
source("_src/src.R")
#--
## carregando dados: GeoSES Belo Horizonte (intra-municipal)
## - indicadores do censo por ÁREA DE PONDERAÇÃO
## - os dados são carregados no objeto "dta"
dta = read.csv("_dta/geoSES_BH_IM.csv")
# --
# gerando IDs
# - os IDs são os 2 últimos dígitos das APs
dta$ID = dta$enumeration_area %% 100
dta$ID
# rearranjando colunas
dta = dta %>% relocate(ID, .before = UF)
# --
## carregando shapefile de BH
# - necessário para produzir os mapas
merge.shp = raster::shapefile(
x = paste0('_out/shapefiles/belo_horizonte_AP.shp'))
# convertendo para sf
sf.obj = st_as_sf(merge.shp)
#  --
# variáveis finais
lab = c('P_SEM_INST',  # Education
'P_ENSSUP',    # Education
'M_DENSMORA',  # Poverty
'P_POBREZA',   # Poverty
'M_RENDDOM',   # Income
'P_IDOSO10SM', # Wealth
'P_ALVSREV',   # Material deprivation
'P_TUDOADEQ')  # Material deprivation
# --
## matriz de observações
X = dta[, lab]
# --
# matriz de observações padronizadas
Z = scale(X)
# --
## PCA
afpc = prcomp(Z)
summary(afpc)
# --
# salvando os resultados em um arquivo de texto
sink(file = '_out/output/pca_final_2.txt')
print(summary(afpc))
sink()
# --
# matriz de pesos
afpc$loadings[]
afpc$rotation
sink(file = '_out/output/rotation_final_2.txt')
print(afpc$rotation)
sink()
# --
# O objeto afpc possui os seguintes componentes:
afpc$sdev
afpc$rotation
afpc$center
# --
# Visualizando os pesos que cada variável tem em cada componente principal
# obtido pela PCA
data.frame(afpc$rotation[,1:2]) %>%
mutate(var = names(dta[, lab])) %>%
melt(id.vars = "var") %>%           # NÃO FUNCIONA????????????
mutate(var = factor(var)) %>%
ggplot(aes(x = var, y = value, fill = var)) +
geom_bar(stat = "identity", color = "black") +
facet_wrap(~variable) +
labs(x = NULL, y = NULL, fill = "Legenda:") +
scale_fill_viridis_d() +
theme_bw()
# salvando em .png
dev.print(file = '_out/figures/1_Loading_2.png',
device = png, width = 1024, height = 768, res = 2*72)
sum((afpc$sdev ^ 2) > 1)
#--
# non-conformable arguments
# Extraindo as Cargas Fatoriais
k <- sum((afpc$sdev ^ 2) > 1) #número de variáveis presentes na base de dados
afpc$rotation[, 1:k] %*% diag(afpc$sdev[1:k])
cargas_fatoriais <- afpc$rotation[, 1:k] %*% diag(afpc$sdev[1:k])
# Visualizando as cargas fatoriais
data.frame(cargas_fatoriais) %>%
rename(F1 = X1,
F2 = X2) %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = T,
font_size = 10)
#--
# Visualizando as Comunalidades
data.frame(rowSums(cargas_fatoriais ^ 2)) %>%
rename(comunalidades = 1) %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = T,
font_size = 10)
# --
# Relatório das cargas fatoriais e das comunalidades
data.frame(cargas_fatoriais) %>%
rename(F1 = X1,
F2 = X2) %>%
mutate(Comunalidades = rowSums(cargas_fatoriais ^ 2)) %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = T,
font_size = 10)
# --
# gravando cargas fatoriais e comunalidades num dataframe
df <- data.frame(cargas_fatoriais)
df['Comunalidade'] = rowSums(cargas_fatoriais ^ 2)
write_xlsx(df,"_out/output/cargas_fatoriais_comunalidades_2.xlsx")
# Plotagem das Cargas Fatoriais
data.frame(cargas_fatoriais) %>%
ggplot(aes(x = X1, y = X2)) +
geom_point(color = "dodgerblue4") +
geom_hline(yintercept = 0, color = "darkgoldenrod3", linetype = "dashed") +
geom_vline(xintercept = 0, color = "darkgoldenrod3", linetype = "dashed") +
geom_text_repel(label = row.names(cargas_fatoriais)) +
labs(x = paste("F1", paste0("(",
round(summary(afpc)$importance[2,1] * 100,
digits = 2),
"%)")),
y = paste("F2", paste0("(",
round(summary(afpc)$importance[2,2] * 100,
digits = 2),
"%)"))) +
theme_bw()
label = row.names(cargas_fatoriais)
# Plotagem das Cargas Fatoriais
data.frame(cargas_fatoriais) %>%
ggplot(aes(x = X1, y = X2)) +
geom_point(color = "dodgerblue4") +
geom_hline(yintercept = 0, color = "darkgoldenrod3", linetype = "dashed") +
geom_vline(xintercept = 0, color = "darkgoldenrod3", linetype = "dashed") +
geom_text_repel(label = row.names(cargas_fatoriais)) +
labs(x = paste("F1", paste0("(",
round(summary(afpc)$importance[2,1] * 100,
digits = 2),
"%)")),
y = paste("F2", paste0("(",
round(summary(afpc)$importance[2,2] * 100,
digits = 2),
"%)"))) +
theme_bw()
t(afpc$rotation)/afpc$sdev
t(afpc$rotation)/afpc$sdev[,2]
t(afpc$rotation)/afpc$sdev[,1:2]
(t(afpc$rotation)/afpc$sdev)[,1:2]
(t(afpc$rotation)/afpc$sdev)[1:2,]
colnames(X)
data.frame(t(scores_fatoriais)[,1:k])
# Scores Fatoriais
scores_fatoriais <- (t(afpc$rotation)/afpc$sdev)[1:2,]
colnames(scores_fatoriais) <- colnames(X)
scores_fatoriais
df  <-  data.frame(t(scores_fatoriais)[,1:k])
write_xlsx(df,"_out/output/scores_fatoriais_2.xlsx")
scores_fatoriais %>%
t() %>%
data.frame() %>%
rename(PC1 = 1,
PC2 = 2) %>%
select(PC1, PC2) %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = T,
font_size = 10)
scores_fatoriais[1,]
scores_fatoriais[2,]
# Assumindo-se apenas o F1 e F2 como indicadores, calculam-se os scores
# fatorias
score_D1 <- scores_fatoriais[1,] # selecionando a primeira linha
score_D1
score_D2 <- scores_fatoriais[2,] # selecionando a segunda linha
score_D2
t(apply(X, 1, function(x) x * score_D1))
# Estabelecendo o ranking dos indicadores assumido
F1 <- t(apply(X, 1, function(x) x * score_D1))
F2 <- t(apply(X, 1, function(x) x * score_D2))
F1
F2
# Na construção de rankings no R, devemos efetuar a multiplicação por -1,
# visto que os scores fatoriais das observações mais fortes são, por padrão,
# presentados acompanhados do sinal de menos.
F1 <- data.frame(F1) %>%
mutate(fator1 = rowSums(.) * 1)
F1 %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = T,
font_size = 10)
F2 <- data.frame(F2) %>%
mutate(fator2 = rowSums(.) * -1)
F2 %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = T,
font_size = 10)
# Importando as colunas de fatores F1 e F2
X["Fator1"] <- F1$fator1
X["Fator2"] <- F2$fator2
res_ACP = X[,c('Fator1', 'Fator2')]
# Calculando a variância compartilhada
var_compartilhada <- (afpc$sdev ^ 2/sum(afpc$sdev ^ 2))
var_compartilhada
X %>%
mutate(pontuacao = Fator1 * var_compartilhada[1] +
Fator2 * var_compartilhada[2]) -> X
# Visualizando o ranking final
X %>%
arrange(desc(pontuacao)) %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = T,
font_size = 10)
X$ID = dta$enumeration_area %% 100
X$ID
NEW = X %>% relocate(ID, .before = P_SEM_INST)
write_xlsx(NEW,"_out/output/fatores_e_ranking_final_2.xlsx")
# --
# Teste de Bartlett de Esfericidade
Bartlett.sphericity.test <- function(x)
{
method <- "Bartlett's test of sphericity"
data.name <- deparse(substitute(x))
x <- subset(x, complete.cases(x)) # Omit missing values
n <- nrow(x)
p <- ncol(x)
chisq <- (1-n+(2*p+5)/6)*log(det(cor(x)))
df <- p*(p-1)/2
p.value <- pchisq(chisq, df, lower.tail=FALSE)
names(chisq) <- "X-squared"
names(df) <- "df"
return(structure(list(statistic=chisq, parameter=df, p.value=p.value,
method=method, data.name=data.name), class="htest"))
}
# --
# Resultado do Teste de Esfericidade:
Bartlett.sphericity.test(X)
# --
# vetor de médias
# Nota: invocar apenas 'mu' printa o vetor como data frame
# - as.matrix(mu) printa o vetor como um vetor coluna
mu = colMeans(dta[, lab])
mu
as.matrix(mu)
# matriz de covariâncias
cov = cov(dta[, lab])
cov
# matriz de correlações
corr = cor(dta[, lab])
corr
# corrplot
corrplot(corr,
# customizando cores
# - ver função 'mat.colors' em "_src"
method = 'color', col = mat.colors(200),
# lower
type = 'lower',
# texto nos coeficientes
addCoef.col = 'black',
# cor do texto
tl.col = 'black',
# rotação do texto
tl.srt = 90,
# cor legenda
cl.pos = 'b',
# correlações diagonais
diag = T,
# número de dígitos
number.digits = 2
)
# salvando em .png
dev.print(file = '_out/figures/1_figCorrPlot_EDUCATION_2.png',
device = png, width = 1024, height = 768, res = 1.2*72)
# salvando em .png
dev.print(file = '_out/figures/1_figCorrPlot_PCA_2.png',
device = png, width = 1024, height = 768, res = 1.2*72)
#--
## carregando dados: GeoSES Belo Horizonte (intra-municipal)
## - indicadores do censo por ÁREA DE PONDERAÇÃO
## - os dados são carregados no objeto "dta"
dta = read.csv("_dta/geoSES_BH_IM.csv")
# --
## carregando shapefile de BH
# - necessário para produzir os mapas
merge.shp = raster::shapefile(
x = paste0('_out/shapefiles/belo_horizonte_AP.shp'))
# Plotagem das Cargas Fatoriais
data.frame(cargas_fatoriais) %>%
ggplot(aes(x = X1, y = X2)) +
geom_point(color = "dodgerblue4") +
geom_hline(yintercept = 0, color = "darkgoldenrod3", linetype = "dashed") +
geom_vline(xintercept = 0, color = "darkgoldenrod3", linetype = "dashed") +
geom_text_repel(label = row.names(cargas_fatoriais)) +
labs(x = paste("F1", paste0("(",
round(summary(afpc)$importance[2,1] * 100,
digits = 2),
"%)")),
y = paste("F2", paste0("(",
round(summary(afpc)$importance[2,2] * 100,
digits = 2),
"%)"))) +
theme_bw()
pacotes <- c("corrplot",   # matrizes de correlação
"ggplot2",    # gráficos diversos
"ggspatial",  # mapas e shapefiles
"ggsn",       # mapas e shapefiles
"raster",     # mapas e shapefiles
"rgdal",      # mapas e shapefiles
"sf",         # mapas e shapefiles
"sp",         # mapas e shapefiles
"ggrepel",    # mapas e shapefiles
"gggenes",    # mapas e shapefiles
"tidyverse",  # manipulação de bases de dados
"kableExtra",
"RcmdrMisc",  # Teste KMO
"dplyr",
"writexl",    # salvar em excel
"reshape2")   # função melt
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
# Plotagem das Cargas Fatoriais
data.frame(cargas_fatoriais) %>%
ggplot(aes(x = X1, y = X2)) +
geom_point(color = "dodgerblue4") +
geom_hline(yintercept = 0, color = "darkgoldenrod3", linetype = "dashed") +
geom_vline(xintercept = 0, color = "darkgoldenrod3", linetype = "dashed") +
geom_text_repel(label = row.names(cargas_fatoriais)) +
labs(x = paste("F1", paste0("(",
round(summary(afpc)$importance[2,1] * 100,
digits = 2),
"%)")),
y = paste("F2", paste0("(",
round(summary(afpc)$importance[2,2] * 100,
digits = 2),
"%)"))) +
theme_bw()
# Plotagem das Cargas Fatoriais
data.frame(cargas_fatoriais) %>%
ggplot(aes(x = X1, y = X2)) +
geom_point(color = "dodgerblue4") +
geom_hline(yintercept = 0, color = "darkgoldenrod3", linetype = "dashed") +
geom_vline(xintercept = 0, color = "darkgoldenrod3", linetype = "dashed") +
geom_text_repel(label = row.names(cargas_fatoriais)) +
labs(x = paste("F1", paste0("(",
round(summary(afpc)$importance[2,1] * 100,
digits = 2),
"%)")),
y = paste("F2", paste0("(",
round(summary(afpc)$importance[2,2] * 100,
digits = 2),
"%)"))) +
theme_bw()
# salvando em .png
dev.print(file = '_out/figures/1_Cargas_Fatoriais_2.png',
device = png, width = 1024, height = 768, res = 2*72)

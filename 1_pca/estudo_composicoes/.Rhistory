library(dplyr)
library(bigrquery)
library(DBI)
con <- dbConnect(
bigrquery::bigquery(),
project = "bigquery-public-data",
dataset = "fda_food",
billing = "greenpeace-360016"
)
install.packages("rlang")
install.packages("rlang")
library(DBI)
con <- dbConnect(
bigrquery::bigquery(),
project = "bigquery-public-data",
dataset = "fda_food",
billing = "greenpeace-360016"
)
con
dbListTables(con)
dbListTables(con)
skeds <- tbl(con, "food_events")
sql <- "SELECT * FROM `bigquery-public-data.fda_food.food_events`"
library(DBI)
my_results <- dbGetQuery(con, sql)
sql <- "SELECT * FROM bigquery-public-data.fda_food.food_events"
library(DBI)
my_results <- dbGetQuery(con, sql)
sql <- "SELECT * FROM `fda_food.food_events`"
library(DBI)
my_results <- dbGetQuery(con, sql)
library(bigrquery)
library(dbplyr)
install.packages("dplyr")
library(dbplyr)
con <- dbConnect(
bigquery::bigquery(),
project = "bigquery-public-data",
dataset = "food_events",
billing = Sys.getenv("greenpeace-360016")
)
con <- dbConnect(
bigrquery::bigquery(),
project = "bigquery-public-data",
dataset = "food_events",
billing = Sys.getenv("greenpeace-360016")
)
dbListTables(con)
skeds <- dplyr::tbl(con, "schedules")
pacotes <- c("plotly","tidyverse","ggrepel","fastDummies","knitr","kableExtra",
"splines","reshape2","PerformanceAnalytics","metan","correlation",
"see","ggraph","nortest","rgl","car","olsrr","jtools","ggstance",
"magick","cowplot","beepr","Rcpp")
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
#--
#Definindo os dados:
Renda=c(1117.25,2486.12,1933.51,695.19,1280.50,1842.9,629.31,1137.82,757.85,695.05)
Gasto=c(1166.77,1951.0,1737.32,744.90,1544.75,1295.87,981.98,1050.07,645.03,615.69)
modelo1 <- lm(Gasto~Renda)   #Funcao do R para o ajuste do MRLS
summary(modelo1)             #Mostra alguns resumos do ajuste
#Calculando os novos intervalos de confiança
confint(modelo1, level = 0.95) # siginificância 5%
#Plotando o Novo GrÃ¡fico com Intervalo de ConfianÃ§a de 95%
#Note o estreitamento da amplitude dos intervalos de confianÃ§a!
ggplotly(
ggplot(modelo1, aes(x = Renda, y = Gasto)) +
geom_point(color = "#39568CFF") +
geom_smooth(aes(color = "Fitted Values"),
method = "lm",
level = 0.95) +
labs(x = "Renda",
y = "Gasto") +
scale_color_manual("Legenda:",
values = "grey50") +
theme_bw()
)
#--
#Procedimento SEM intercept
modelo2 <- lm(Gasto~Renda-1)   #Funcao do R para o ajuste do MRLS
summary(modelo2)             #Mostra alguns resumos do ajuste
#Comparando os parâmetros do modelo1 X modelo2
export_summs(modelo1, modelo2, scale = F, digits = 4)
#Gráfico didático para visualizar o viés decorrente de se eliminar erroneamente
#o intercepto em modelos regressivos
my_plot2 <-
ggplot(modelo1, aes(x = Gasto, y = Renda)) +
geom_point(color = "#39568CFF", size = 2.5) +
geom_smooth(aes(color = "Fitted Values OLS"),
method = "lm", se = F, size = 1.5) +
geom_segment(aes(color = "Sem Intercepto",
x = min(Gasto),
xend = max(Gasto),
y = modelo2$coefficients[1]*min(Gasto),
yend = modelo2$coefficients[1]*max(Gasto)),
size = 1.5) +
labs(x = "Renda",
y = "Gasto") +
scale_color_manual("Legenda:",
values = c("grey50", "#1F968BFF")) +
theme_cowplot()
my_plot2
#Gráfico didático para visualizar o viés decorrente de se eliminar erroneamente
#o intercepto em modelos regressivos
my_plot2 <-
ggplot(modelo1, aes(x = Gasto, y = Renda)) +
geom_point(color = "#39568CFF", size = 2.5) +
geom_smooth(aes(color = "Fitted Values OLS"),
method = "lm", se = F, size = 1.5) +
geom_segment(aes(color = "Sem Intercepto",
x = min(Gasto),
xend = max(Gasto),
y = modelo2$coefficients[1]*min(Gasto),
yend = modelo2$coefficients[1]*max(Gasto)),
size = 1.5) +
labs(x = "Renda",
y = "Gasto") +
scale_color_manual("Legenda:",
values = c("grey50", "#1F968BFF")) +
theme_cowplot()
my_plot2
ggplot(modelo2, aes(x = Renda, y = Gasto)) +
#Note o estreitamento da amplitude dos intervalos de confianÃ§a!
ggplotly(
geom_point(color = "#39568CFF") +
#Note o estreitamento da amplitude dos intervalos de confianÃ§a!
ggplotly(
ggplot(modelo2, aes(x = Renda, y = Gasto)) +
geom_point(color = "#39568CFF") +
geom_smooth(aes(color = "Fitted Values"),
method = "lm",
level = 0.95) +
labs(x = "Renda_sem",
y = "Gasto_sem") +
scale_color_manual("Legenda:",
values = "grey50") +
theme_bw()
#Plotando o Novo GrÃ¡fico com Intervalo de ConfianÃ§a de 95%
#Note o estreitamento da amplitude dos intervalos de confianÃ§a!
ggplotly(
#Plotando o Novo GrÃ¡fico com Intervalo de ConfianÃ§a de 95%
#Note o estreitamento da amplitude dos intervalos de confianÃ§a!
ggplotly(
ggplot(modelo2, aes(x = Renda, y = Gasto)) +
geom_point(color = "#39568CFF") +
geom_smooth(aes(color = "Fitted Values"),
method = "lm",
level = 0.95) +
labs(x = "Renda_sem",
y = "Gasto_sem") +
scale_color_manual("Legenda:",
values = "grey50") +
theme_bw()
)
#--
#DATASET QUE CONTÉM REPLICAÇÕES
#Definindo os dados:
Renda3x=c(1117.25,1117.25,1117.25,
2486.12,2486.12,2486.12,
1933.51,1933.51,1933.51,
695.19,695.19,695.19,
1280.50,1280.50,1280.50,
1842.9,1842.9,1842.9,
629.31,629.31,629.31,
1137.82,1137.82,1137.82,
757.85,757.85,757.85,
695.05,695.05,695.05)
Gasto3x=c(1166.77,1166.77,1166.77,
1951.0,1951.0,1951.0,
1737.32,1737.32,1737.32,
744.90,744.90,744.90,
1544.75,1544.75,1544.75,
1295.87, 1295.87, 1295.87,
981.98,981.98,981.98,
1050.07,1050.07,1050.07,
645.03,645.03,645.03,
615.69,615.69,615.69)
modelo3 <- lm(Gasto3x~Renda3x)   #Funcao do R para o ajuste do MRLS
summary(modelo3)             #Mostra alguns resumos do ajuste
#--
#Calculando os novos intervalos de confiança
confint(modelo3, level = 0.95) # siginificância 5%
#Plotando o Novo Gráfico com Intervalo de Confiança de 95%
#Note o estreitamento da amplitude dos intervalos de confiança!
ggplotly(
ggplot(modelo3, aes(x = Renda3x, y = Gasto3x)) +
geom_point(color = "#39568CFF") +
geom_smooth(aes(color = "Fitted Values"),
method = "lm",
level = 0.95) +
labs(x = "Renda 3x",
y = "Gasto 3x") +
scale_color_manual("Legenda:",
values = "grey50") +
theme_bw()
)
summary(modelo3)             #Mostra alguns resumos do ajuste
summary(modelo1)             #Mostra alguns resumos do ajuste
#Plotando o Novo GrÃ¡fico com Intervalo de ConfianÃ§a de 95%
#Note o estreitamento da amplitude dos intervalos de confianÃ§a!
ggplotly(
ggplot(modelo1, aes(x = Renda, y = Gasto)) +
geom_point(color = "#39568CFF") +
geom_smooth(aes(color = "Fitted Values"),
method = "lm",
level = 0.95) +
labs(x = "Renda_com",
y = "Gasto_com") +
scale_color_manual("Legenda:",
values = "grey50") +
theme_bw()
)
#Plotando o Novo GrÃ¡fico com Intervalo de ConfianÃ§a de 95%
#Note o estreitamento da amplitude dos intervalos de confianÃ§a!
ggplotly(
ggplot(modelo2, aes(x = Renda, y = Gasto)) +
geom_point(color = "#39568CFF") +
geom_smooth(aes(color = "Fitted Values"),
method = "lm",
level = 0.95) +
labs(x = "Renda_sem",
y = "Gasto_sem") +
scale_color_manual("Legenda:",
values = "grey50") +
theme_bw()
)
#Plotando o Novo Gráfico com Intervalo de Confiança de 95%
#Note o estreitamento da amplitude dos intervalos de confiança!
ggplotly(
ggplot(modelo3, aes(x = Renda3x, y = Gasto3x)) +
geom_point(color = "#39568CFF") +
geom_smooth(aes(color = "Fitted Values"),
method = "lm",
level = 0.95) +
labs(x = "Renda 3x",
y = "Gasto 3x") +
scale_color_manual("Legenda:",
values = "grey50") +
theme_bw()
)
#Comparando os parâmetros do modelo1 X modelo2
export_summs(modelo1, modelo2, scale = F, digits = 4)
#Plotando o Novo GrÃ¡fico com Intervalo de ConfianÃ§a de 95%
#Note o estreitamento da amplitude dos intervalos de confianÃ§a!
ggplotly(
ggplot(modelo2, aes(x = Renda, y = Gasto)) +
geom_point(color = "#39568CFF") +
geom_smooth(aes(color = "Fitted Values"),
method = "lm",
level = 0.95) +
labs(x = "Renda_sem",
y = "Gasto_sem") +
scale_color_manual("Legenda:",
values = "grey50") +
theme_bw()
)
#Gráfico didático para visualizar o viés decorrente de se eliminar erroneamente
#o intercepto em modelos regressivos
my_plot2 <-
ggplot(modelo1, aes(x = Gasto, y = Renda)) +
geom_point(color = "#39568CFF", size = 2.5) +
geom_smooth(aes(color = "Fitted Values OLS"),
method = "lm", se = F, size = 1.5) +
geom_segment(aes(color = "Sem Intercepto",
x = min(Gasto),
xend = max(Gasto),
y = modelo2$coefficients[1]*min(Gasto),
yend = modelo2$coefficients[1]*max(Gasto)),
size = 1.5) +
labs(x = "Renda",
y = "Gasto") +
scale_color_manual("Legenda:",
values = c("grey50", "#1F968BFF")) +
theme_cowplot()
my_plot2
say(what = "Cannot index object of type 'cat food'.", by = "cat", type = "warning")
cowsay::say(what = "Cannot index object of type 'cat food'.", by = "cat", type = "warning")
# --
## limpando o workspace
rm(list = ls())
pacotes <- c("corrplot",   # matrizes de correlação
"ggplot2",    # gráficos diversos
"ggspatial",  # mapas e shapefiles
"ggsn",       # mapas e shapefiles
"raster",     # mapas e shapefiles
"rgdal",      # mapas e shapefiles
"sf",         # mapas e shapefiles
"sp",         # mapas e shapefiles
"tidyverse",  # manipulação de bases de dados
"kableExtra",
"RcmdrMisc",  # Teste KMO
"dplyr",
"writexl")    # salvar em excel
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
## diretório de trabalho
setwd("C:/Users/Renato/OneDrive/github/_tcc/1_pca/estudo_composicoes")
#--
## carregando funções auxiliares
source("_src/src.R")
#--
## carregando dados: GeoSES Belo Horizonte (intra-municipal)
## - indicadores do censo por ÁREA DE PONDERAÇÃO
## - os dados são carregados no objeto "dta"
dta = read.csv("_dta/geoSES_BH_IM.csv")
# --
# gerando IDs
# - os IDs são os 2 últimos dígitos das APs
dta$ID = dta$enumeration_area %% 100
dta$ID
# rearranjando colunas
dta = dta %>% relocate(ID, .before = UF)
# --
## carregando shapefile de BH
# - necessário para produzir os mapas
merge.shp = raster::shapefile(
x = paste0('_out/shapefiles/belo_horizonte_AP.shp'))
# convertendo para sf
sf.obj = st_as_sf(merge.shp)
#  --
# variáveis finais
lab = c('P_SEM_INST',  # Education
'P_ENSSUP',    # Education
'P_ATE5',      # Mobility
'P_MAISDE2',   # Mobility
'M_DENSMORA',  # Poverty
'P_POBREZA',   # Poverty
'M_RENDDOM',   # Income
'P_IDOSO10SM', # Wealth
'P_ALVSREV',   # Material deprivation
'P_TUDOADEQ')  # Material deprivation
# --
## matriz de observações
X = dta[, lab]
# --
# matriz de observações padronizadas
Z = scale(X)
# --
## PCA
afpc = prcomp(Z)
summary(afpc)
# --
# salvando os resultados em um arquivo de texto
sink(file = '_out/output/pca_final.txt')
print(summary(afpc))
sink()
# --
# matriz de pesos
afpc$loadings[]
# --
# O objeto afpc possui os seguintes componentes:
afpc$sdev
afpc$rotation
afpc$center
# --
# Visualizando os pesos que cada variável tem em cada componente principal
# obtido pela PCA
data.frame(afpc$rotation) %>%
mutate(var = names(nf[, lab])) %>%
melt(id.vars = "var") %>%           # NÃO FUNCIONA????????????
mutate(var = factor(var)) %>%
ggplot(aes(x = var, y = value, fill = var)) +
geom_bar(stat = "identity", color = "black") +
facet_wrap(~variable) +
labs(x = NULL, y = NULL, fill = "Legenda:") +
scale_fill_viridis_d() +
theme_bw()
# --
# Visualizando os pesos que cada variável tem em cada componente principal
# obtido pela PCA
data.frame(afpc$rotation) %>%
mutate(var = names(dta[, lab])) %>%
melt(id.vars = "var") %>%           # NÃO FUNCIONA????????????
mutate(var = factor(var)) %>%
ggplot(aes(x = var, y = value, fill = var)) +
geom_bar(stat = "identity", color = "black") +
facet_wrap(~variable) +
labs(x = NULL, y = NULL, fill = "Legenda:") +
scale_fill_viridis_d() +
theme_bw()
dta[, lab]
names(dta[, lab])
id.vars
# --
# Visualizando os pesos que cada variável tem em cada componente principal
# obtido pela PCA
data.frame(afpc$rotation) %>%
mutate(var = names(dta[, lab])) %>%
melt(id.vars = "var") %>%           # NÃO FUNCIONA????????????
mutate(var = factor(var)) %>%
ggplot(aes(x = var, y = value, fill = var)) +
geom_bar(stat = "identity", color = "black") +
facet_wrap(~variable) +
labs(x = NULL, y = NULL, fill = "Legenda:") +
scale_fill_viridis_d() +
theme_bw()
pacotes <- c("corrplot",   # matrizes de correlação
"ggplot2",    # gráficos diversos
"ggspatial",  # mapas e shapefiles
"ggsn",       # mapas e shapefiles
"raster",     # mapas e shapefiles
"rgdal",      # mapas e shapefiles
"sf",         # mapas e shapefiles
"sp",         # mapas e shapefiles
"tidyverse",  # manipulação de bases de dados
"kableExtra",
"RcmdrMisc",  # Teste KMO
"dplyr",
"writexl",    # salvar em excel
"reshape2")   # função melt
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
# --
# Visualizando os pesos que cada variável tem em cada componente principal
# obtido pela PCA
data.frame(afpc$rotation) %>%
mutate(var = names(dta[, lab])) %>%
melt(id.vars = "var") %>%           # NÃO FUNCIONA????????????
mutate(var = factor(var)) %>%
ggplot(aes(x = var, y = value, fill = var)) +
geom_bar(stat = "identity", color = "black") +
facet_wrap(~variable) +
labs(x = NULL, y = NULL, fill = "Legenda:") +
scale_fill_viridis_d() +
theme_bw()
# --
# Visualizando os pesos que cada variável tem em cada componente principal
# obtido pela PCA
data.frame(afpc$rotation[,1:2]) %>%
mutate(var = names(dta[, lab])) %>%
melt(id.vars = "var") %>%           # NÃO FUNCIONA????????????
mutate(var = factor(var)) %>%
ggplot(aes(x = var, y = value, fill = var)) +
geom_bar(stat = "identity", color = "black") +
facet_wrap(~variable) +
labs(x = NULL, y = NULL, fill = "Legenda:") +
scale_fill_viridis_d() +
theme_bw()
# salvando em .png
dev.print(file = '_out/figures/1_Loading.png',
device = png, width = 1024, height = 768, res = 2*72)
var
value
ggplot(aes(x = var, y = value, fill = var))
# Scree Plot - apenas ignorar os warnings
# para escolher quantos fatores serão retidos. Mas vamos utilizar critério de kaiser
ggplotly(
fviz_eig(X = afpc,
ggtheme = theme_bw(),
barcolor = "black",
barfill = "dodgerblue4",
linecolor = "darkgoldenrod3")
)
#--
# non-conformable arguments
# Extraindo as Cargas Fatoriais
k <- sum((afpc$sdev ^ 2) > 1) #número de variáveis presentes na base de dados
cargas_fatoriais <- afpc$rotation[, 1:k] %*% diag(afpc$sdev[1:k])
# Visualizando as cargas fatoriais
data.frame(cargas_fatoriais) %>%
rename(F1 = X1,
F2 = X2) %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = T,
font_size = 10)
#--
# Visualizando as Comunalidades
data.frame(rowSums(cargas_fatoriais ^ 2)) %>%
rename(comunalidades = 1) %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = T,
font_size = 10)
# --
# Relatório das cargas fatoriais e das comunalidades
data.frame(cargas_fatoriais) %>%
rename(F1 = X1,
F2 = X2) %>%
mutate(Comunalidades = rowSums(cargas_fatoriais ^ 2)) %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = T,
font_size = 10)
# --
# gravando cargas fatoriais e comunalidades num dataframe
df <- data.frame(cargas_fatoriais)
df
df['Comunalidade'] = rowSums(cargas_fatoriais ^ 2)
df
write_xlsx(df,"_out/output/cargas_fatoriais_comunalidades.xlsx")
